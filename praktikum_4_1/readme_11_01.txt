Кобиков Яромир, М1-16, филиал МГУ им. М.В.Ломоносова.

Раздел: Поиск собственных значений матриц.
  		Задача: № 1.
    	Условие: LR с отражениями.

Параметры алгоритма и интерфейсные параметры передаваются через параметры командной строки. Образец синтаксиса:

/home/ivk/evc$ ./evc -?
Usage: evc [input_file_name] [output_file_name] [options]
Where options include:
 -d                print debug messages [default OFF]
 -e                print errors [default OFF]
 -p                print matrix [default OFF]
 -t                print execution time [default OFF]
 -prec=<num>       precision [default - 1e-14]
 -eps=<num>        epsilon [default - 1e-10]
 -max_iter=<num>   limit number of iterations [default - 0, i.e. not limit]
 -h, -?            print this and exit
Default input_file_name value is 11_01_in.txt, default output_file_name value is 11_01_out.txt.

Здесь первая строчка - расположение бинарника программы (первое строковое поле аргументов функции main);
                       precision определяет, числа меньше какого считать нулем;
                       epsilon - точность;
                       max_iter - ограничение на число итераций алгоритма (если оно нулевое или отрицательное - ограничений нет).

Пример вызова программы: ./evc input.txt output.txt -e -t -eps=1e-6 -max_iter=10000


Формат входного файла:

   n
   a_1_1 a_1_2 ... a_1_n
   a_2_1 a_2_2 ... a_2_n
   .....................
   a_n_1 a_n_2 ... a_n_n


Здесь n - размерность матрицы, a_i_j - элементы матрицы.

Формат чисел: n - "%d", a_i_j - "%lf".

Формат выходного файла. Если вектор собственных значений найден

   n
   e_1
   e_2
   ...
   e_n

Здесь n - размерность матрицы, e_i - собственные значения, отсортированные в порядке возрастания.
Если метод не применим к входной матрице, выходной файл должен содержать одну единственную цифру 0.

Формат чисел: n - "%d", e_i - "%1.9lf".

Коды ошибок:

  404 (ERROR_OPEN_FILE_IN) - ошибка открытия файла для считывания данных. Возможно не правильно указано имя файла.
  406 (ERROR_OPEN_FILE_OUT) - ошибка открытия файла для записи ответа. Возможно не правильно указано имя файла.

  68 (ERROR_DIMENSION) - ошибка значения(первая строка входного файла для считывания) числа размерности матрицы в файле (размерность должна быть > 1).

  66 (ERROR_DIMENSION_MATRIX_A) - ошибка размерности матрицы A. Возникает, если в матрице А не хватает элементов(при считывании с файла).
				  Матрица A размерности n*n (где n - значение указываемое в первом поле входного файла).

  400 (ERROR_INPUT) - ошибка ввода аргументов. Возможные причины: если имя указанных файлов (входного, выходного) не содержит- ".txt", если введеные опции не верно указаны.

  200 (PRINT_INFO) - код запроса списка опций.
  500 (ERROR_EMPTY) - ошибка - файл пустой.
    0 (SUCCESS) - код успешно завершенной программы.

..........................................................................................................................................................

Алгоритм решения задачи:
  ////////////////////////////////////////////////

  ////////////////////////////////////////////////

Функции в файле main_lss_20_01.с:

  size_t lss_memsize_20_01(int n) - определение размера массива дополнительной памяти.
				    Входной аргумент - целое число.
				    Возвращаемое значение - int - n * sizeof(double).

  int check_str(char * first, char * second) - сравнение строк.
					       Aргументы: 2 строки.
					       Возвращаемое значение в случае успеха 0, неудача 1.

  int check_name_txt(char * first) - функция для проверки содержания в названии файлов (ввода/ввывода) ".txt".
				     Aргумент: строка.
				     Возвращаемое значение в случае успеха 0, неудача 1(если в переданной строке не присутсвует ".txt").

  void print_help() - печать образца синтаксиса входных параметров.

  int errors(int code) - печать информации по соответвующему коду ошибки.
			 Аргумент: код ошибки (тип int).
			 Если глобальная переменная var_for_errors == 1 (в параметрах командной строки было передано значение "-e"), то при фильтрации code, на экран пользователя будет выводиться соответсвующее коду ошибки передупреждение.
			 Возвращаемое значение код ошибки (входной аргумент).

  void print_matrix(int n, double *  A, double * B) - печать матрицы A и B.
						      Аргументы: размерность матрицы (для A, будет n*n), массив матрицы A, массив матрицы B.

  int main(int argc, char *argv[]) - Аргумент: argc типа integer содержит в себе количество аргументов командной строки.
					       argv типа char - указатель на массив строк.
					       Каждый элемент массива указывает на аргументы командной строки. Один параметр отделяется от другого пробелами.
				     Первым этапом проверяются входные аргументы, если они есть.
				     Выделение памяти под массив значений матрицы A, B, X, tmp.
				     Массив tmp заполняется числами от 1 до n. Затем считывание данных из входного файла.
				     Печать матриц A, B, ответа, если глобальный флаг var_for_debug == 1(в параметрах командной строки было передано значение "-d") или было введено с консоли "-p" (print matrix).
				     Запуск подпрограммы и подсчет времени работы.
				     Запись в выходной файл результата работы подпрограммы.
				     Возвращаемое значение в случае успеха 0 (SUCCESS).

Функции в файле lss_20_01.с:

  void print_matrix_a_b(int n, double * A, double * B, char * string) - печать матриц A и B с заголовком.
									Агрументы: размерность матрицы (для A, будет n*n), матрица A, матрица B, строка для заголовка.

  int lss_20_01(int n, double * A, double * B, double * X, double * tmp) - подпрограмма (решение системы уравнений методом Гаусса с выбором главного элемента по строке).
									   Аргументы: размерность матрицы(для A, будет n*n), массив матрицы A, массив матрицы B,  массив решения X, долнительный массив( Методу Гаусса с выбором главного элемента по строке, требуется дополнительный массив для хранения индексов переменных).
								           Возвращаемое значеные: 0 - работа завершена успешно, решение построено; 1 - работа завершена успешно, решения системы не существует.
