ТРЕБОВАНИЯ К ПРОГРАММАМ "ПРАКТИКУМА НА ЭВМ" ДЛЯ РЕШЕНИЯ СИСТЕМ ЛИНЕЙНЫХ УРАВНЕНИЙ

0. Все задачи практикума на ЭВМ по решению линейных уравнений содержательно имеют следующую структуру. Входными данными для задачи является вектор-столбец B размерности n (правая часть) и квадратная матрица A размерности n (матрица системы) либо общего вида, либо симметрическая. Требуется решить систему линейных уравнений A*X=B заданным методом.

1. Программа должна состоять из двух модулей - интерфейсного (обеспечивающего разбор командной строки, файловый ввод-вывод, выделение памяти, обработку ошибок и т.д.) и вычислительного (обеспечивающего непосредственное решение задачи).

Интерфейсный модуль должен находиться в файле main_lss_SS_NN.c, вычислительный lss_SS_NN.c, файл с заголовком - lss_SS_NN.h; где SS - 2 цифры - номер студента в списке, NN - 2 цифры - номер задачи в разделе. 

Модули должны быть написаны на C, разрешается использование только библиотек stdio.h, stdlib.h, math.h, time.h. Использование других заголовков и языка C++ запрещается. Программа должна компилироваться компилятором gcc с опцией "-x c" без ошибок (аналогичная опция для компилятора bcc32 "-P-", для микрософтовского компилятора cl "/TC").

Программа должна поставляться в комплекте с файлом сборки makefile для системы GNU make, при этом программа должна собираться при вызове системы сборки без конкретизации цели.

2. Программа должна получать входные данные через файл и записывать решение тоже в файл. Имена этих файлов передаются через параметры командной строки. В случае, если параметры командной строки опущены, программа должна использовать имена файлов по умолчанию: lss_SS_NN_in.txt - входной файл, lss_SS_NN_out.txt - выходной файл.

Параметры алгоритма и интерфейсные параметры должны также передаваться через параметры командной строки. Образец синтаксиса:

/home/ivk/lss/lss
Usage: lss [input_file_name] [output_file_name] [options]
Where options include:
  -d    print debug messages [default OFF]
  -e    print errors [default OFF]
  -p    print matrix [default OFF]
  -t    print execution time [default OFF]
  -h, -?     print this and exit
Default input_file_name value is lss_00_00_in.txt, default output_file_name value is lss_00_00_out.txt.

Здесь первая строчка - расположение бинарника программы (первое строковое поле аргументов функции main). Пример вызова программы:

./lss input.txt output.txt -e -t

Студенту разрешается вводить собственные дополнительные опции и форматы вызова, но перечисленные в образце опции и синтаксис вызова программа поддерживать обязана.

Программа должна корректно диагностировать ошибки в параметрах, а также ошибки записи и чтения из файлов, информировать о них пользователя через стандартный поток ошибок и корректно завершать работу. Результатом работы программы должен быть 0 в случае успешной работы либо код ошибки в случае ошибки. При этом ограничения на значения кодов ошибки не накладывается, но в документации к программе должно быть описано, что именно какой код ошибки означает.

3. Формат входного файла:

   n
   a_1_1 a_1_2 ... a_1_n
   a_2_1 a_2_2 ... a_2_n
   .....................
   a_n_1 a_n_2 ... a_n_n
   b_1
   b_2
   ...
   b_n

Здесь n - число уравнений в системе (число неизвестных всегда считаем равным числу уравнений), a_i_j - элементы матрицы системы, b_i - элементы вектора правой части.

Формат чисел: n - "%d", a_i_j и b_i - "%lf".

4. Формат выходного файла. Если решение существует (для переопределенных систем свободные неизвестные полагать нулями)

   n
   x_1
   x_2
   ...
   x_n

Если решения не существует, выходной файл должен содержать одну единственную цифру '0'.

Формат чисел: n - "%d", x_i - "%1.9lf".

4.5. Формат диагностических сообщений строго не специфицируется, но сообщения должны быть достаточно подробными, чтобы по ним можно было понять, что именно в данный момент делает программа и сколько времени она уже этим занимается. Печать общего времени выполнения программы - строго обязательная опция.

5. Решение системы линейных уравнений должно быть оформлено в виде подпрограммы, находящейся в отдельном файле и имеющей следующий заголовок:

   int lss_SS_NN(int n, double* A, double* B, double* X, double* tmp)

Здесь A - массив с матрицей системы в формате a_1_1 a_1_2 ... a_1_n a_2_1 a_2_2 ... a_n_n для матрицы общего вида и a_1 a_2 ... a_n c_1 c_2 ... c_n d_1 d_2 ... d_n для трехдиагональной матрицы, B - массив правых частей, X - массив решения, tmp - массив дополнительной памяти (если она требуется методу). Размер массива дополнительной памяти должен определяться функцией

   size_t lss_memsize_SS_NN(int n)
   
Получать в этой подпрограмме дополнительную информацию извне через глобальные переменные (за исключением двух глобальных переменных, контролирующих режимы работы "-d" и "-e"), общие блоки, включаемые файлы и т. п. запрещается. Выделение памяти в подпрограмме также запрещается; вся дополнительная память должна передаваться через вектор tmp. 

Подпрограмма решения системы должна возвращать следующие значения:

   0 - работа завершена успешно, решение построено
   1 - работа завершена успешно, решения системы не существует
   -1 - метод решения не применим к данной системе 
   
Метод решения может быть не применим к системе, например, в силу вырожденности матрицы системы для метода решения через построение LU разложения. 

6. Метод решения должен быть реализован таким образом, чтобы он допускал решение максимально широкого класса систем. Например, для всех вариаций метода Гаусса недоопределенные системы должны решаться всегда; метод ортогонализации должен проходить для любых систем с невырожденной матрицей.

7. Преподавателем будут предоставлены инструменты для автоматического порождения тестовых примеров для методов. В обязанности студента входит произвести тщательное тестирование своей программы с использованием этих инструментов. В случае, если при проверке преподавателем решение "падает", завершается с нештатной ошибкой или выдает аномальный ответ для матрицы размерности менее 10 - студенту засчитывается грубая ошибка.

8. Сдача программы студентом осуществляется не более двух раз, при этом первая попытка должна быть осуществлена не позднее установленного срока предварительной сдачи. Если к истечению срока предварительной сдачи студент не предоставил решение - первая попытка считается израсходованной. Не сдача решения за две попытки ведет к снижению оценки за решение.

9. Проверка решения преподавателем включает проверку на плагиат. В случае, если в работе у студента обнаруживается заимствование (в том числе с "маскировочной" модификацией) кода или документации из других работ - оценка студенту будет значительно понижена и факт наличия плагиата отражен в итоговой ведомости.

ПРИЕМОЧНЫЙ КОМПЛЕКТ ПОСТАВКИ РЕШЕНИЯ

0. В данном разделе требований описывается, что именно должно быть включено в сдаваемый комплект поставки решения и в какой форме должен быть предоставлен комплект поставки.

1. Комплект поставки решения должен содержать следующие файлы

    main_lss_SS_NN.c
    lss_SS_NN.c
    lss_SS_NN.h
    readme_lss_SS_NN.txt
    makefile_lss_SS_NN

Здесь два c и один h файл - исходные тексты программы, readme_lss_SS_NN.txt - файл с документацией, makefile_lss_SS_NN - файл для системы GNU make. Кроме указанных пяти файлов никаких других файлов в комплект не включается.

2. Файл документации readme_lss_SS_NN.txt должен содержать описание опций вызова программы (если студент ввел какие-то отличные от перечисленных в требованиях опции и синтаксис вызова - они должны быть описаны в обязательном порядке), краткое описание реализуемых в программе методов и особенности их реализации в программе. Также в документацию включаются ограничения на практическую применимость программы - в частности для какого размера входа и типов матриц автор гарантирует работоспособность программы, желательно с оценкой точности решения.

Строго формат и содержание файла документации не специфицируется, но "хороший" файл документации - это повод для подъема оценки в спорном случае, "плохой" - для снижения. Содержательно "хороший" файл документации - это тот, который помогает получить ответы на вопросы по работе программы в краткой форме без анализа ее кода...

3. Makefile должен быть настроен на использование одного из трех рекомендованных в данном цикле задач компиляторов - gcc, bcc32 или cl. При этом для окончательной проверки рекомендуется использование gcc версии 4.1.2 (с ним вероятность проблем из-за несовпадений версий компиляторов у сдающей и принимающей стороны меньше). Образец makefile'а будет предоставлен преподавателем.
Образец makefile'a может быть найден на ftp сервере (ftp://uz.msu.ru/upload/3/tasks/)

4. Для сдачи решения комплект поставки должен быть упакован в архив lss_SS_NN.7z и выложен на ftp сервер приемки решений. Пароль от архива должен быть выслан участнику форума с ником S.Rodin в личные сообщения. Отправка такого сообщения считается фактом сдачи студентом решения.

СПИСОК МЕТОДОВ РЕШЕНИЯ СИСТЕМ ЛИНЕЙНЫХ УРАВНЕНИЙ ДЛЯ ЗАДАЧ КУРСА "ПРАКТИКУМ НА ЭВМ"

01.  Метод Гаусса с выбором главного элемента по строке.

02.  Метод Гаусса с выбором главного элемента по столбцу.

03.  Метод Гаусса с выбором главного элемента по матрице.

04.  Метод Гаусса-Жордана с выбором главного элемента по строке.

05.  Метод Гаусса-Жордана с выбором главного элемента по столбцу.

06.  Метод Гаусса-Жордана с выбором главного элемента по матрице.

07.  Метод решения через построение LU разложения.

08.  Метод ортогонализации.

09.  Метод вращений.

10.  Метод отражений.

11.  Метод решения через построение разложения Холецкого для систем с симметрической матрицей.

СПИСОК ЛИТЕРАТУРЫ ДЛЯ МЕТОДОВ РЕШЕНИЯ СИСТЕМ ЛИНЕЙНЫХ УРАВНЕНИЙ

1. К.Ю. Богачев. Практикум на ЭВМ. Методы решения линейных систем и нахождения собственных значений. Учебное пособие. Москва, МГУ, Механико-математический факультет, 1999.
2. Н.С. Бахвалов, Н.П. Жидков, Г.М. Кобельков. Численные методы. Москва, "Наука", 1987.
3. В.М. Староверов, А.А. Корнев. Работа в операционной системе UNIX. Москва, МГУ, Механико-математический факультет, 1999.

НЕФОРМАЛЬНЫЙ СПИСОК РЕКОМЕНДУЕМЫХ ИНСТРУМЕНТОВ ДЛЯ ВЫПОЛНЕНИЯ ЗАДАНИЯ

0. Данный список инструментов не является обязательным к использованию и носит рекомендательный характер. В принципе для выполнения задания достаточно любого полноценного 32 битного C компилятора, любого текстового редактора (в том числе стандартного "блокнота" из winows) и любого архиватора, который умеет делать архивы 7z.

1. Borland C++ Compiler version 5.5 - компилятор без UI для windows, бесплатный, в установленном виде всего 55 Мб, под windows заметно шустрее виденный мной вариантов gcc и делает довольно компактный статический бинарник (по сравнению с компиляторами микрософт и gcc).

Скачать можно или с сайта разработчика (он требует регистрации)

https://downloads.embarcadero.com/item/24778

Или найти в "архивах" ПО, например

http://www.softportal.com/getsoft-403-borland-c-compiler-1.html

2. Cygwin - среда linux приложений для windows (GPL). В частности содержит интерпретатор bash/csh и комплект стандартных unix утилит.

К сожалению, имеет сетевой инсталлятор - то есть одними нажатиями OK при установке не обойтись. Всего среда содержит более двух гигабайт всякого хлама (это в bzip!). Я устанавливаю только группу base, плюс gnu make и perl.

При этом есть еще одно НО - начиная с версии 1.7 они перешли на юникод - чем сломали совместимость с более старыми версиями. Я сам использую версию 1.5.25-15.

Если захотите попробовать поставить рекомендуемый разработчиком вариант - файл setup.exe (1 Mb) качать тут

http://www.cygwin.com/setup.exe

Кстати, там в комплекте есть gcс - то есть можно поставить его вместо bcc - можете поэкспериментировать. Но на мой взгляд в среде windows bcc лучше.

3. Notepad++ - "продвинутый" GPL текстовый редактор. Я лично пользуюсь им, но чем писать текст - это дело личного вкуса... Домашняя страница

http://notepad-plus.sourceforge.net/uk/site.htm

4. 7zip - бесплатный архиватор под windows (есть версии для linux). Домашняя страница

http://www.7-zip.org

5. VirtualBox - система виртуализации, бесплатная для индивидуального использования. Позволяет запускать "гостевые" операционные системы как "обычные программы" на вашем компьютере. Может быть полезна, если захочется проверить свое решение в среде, идентичной используемой при проверке, но без "фундаментального" развертывания этой среды на своем компьютере. Домашняя страница

http://www.virtualbox.org/

6. CentOS 5.5 - дистрибутив linux, который используется при проверке решений (я использую версию x64, но можно обойтись 32 битной). Домашняя страница

http://www.centos.org/


Update 110330 N1: добавил раздел 4.5, разрешил две глобальные переменные.

Update 110330 N2: сделал в параметрах командной строки указание пары входной-выходной файл опциональным (то есть они могут быть указаны, а могут быть - нет).

Update 110330 N3: убрал некорректные примеры из вложения.

Update 110603 N4: добавил формат задания чисел во входном и выходном файле.